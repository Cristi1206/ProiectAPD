
import java.util.Scanner;
import java.util.Vector;

class ComputeElement extends Thread {
	int row;
	int column;
	int rv[], cv[];
	public ComputeElement (int row, int column, int rv[], int cv[]) {
		this.row = row;
		this.column = column;
		this.rv = rv;
		this.cv = cv;
		this.start();
	}
	public void run () {
		synchronized (this) {
			Matrix.c[row][column]=0;
			for (int i = 0; i < rv.length; i ++) {
				Matrix.c[row][column] += rv[i] * cv[i];
			}
		}
	}
}

public class Matrix {
	static int[][] c = new int[10000][10000];
	public static void main (String args[]) throws InterruptedException {
		int a[][] = new int[100][100], b[][] = new int[100][100];
		
		Scanner input = new Scanner(System.in);
		System.out.println("Numarul de linii pentru prima matrice: ");
		int m = input.nextInt();
		System.out.println("Numarul de coloane pentru prima matrice si de linii pentru a doua matrice: ");
		int n = input.nextInt();
		System.out.println("Numarul de coloane pentru a doua matrice: ");
		int p = input.nextInt();
		/*--- Generare automata a dimensiunilor matricilor
		m = (int)(Math.random() * 4 + 1);
		System.out.println("Numarul de linii pentru prima matrice: " + m);
		n = (int)(Math.random() * 4 + 1);
		System.out.println("Numarul de coloane pentru prima matrice si de linii pentru a doua matrice: " + n);
		p = (int)(Math.random() * 4 + 1);
		System.out.println("Numarul de coloane pentru a doua matrice: " + p);
		*/
		System.out.println("Prima matrice:");

		for (int i = 0; i < m; i++) {
			for (int j = 0; j < n; j++) {
				a[i][j] = (int)(Math.random() * 10); 
				System.out.print(a[i][j] + " ");
			}
			System.out.println();
		}
		System.out.println("A doua matrice:");
		for (int i = 0; i < n; i++) {
			for (int j = 0; j < p; j++) {
				b[i][j] = (int)(Math.random() * 10); 
				System.out.print(b[i][j] + " ");
			}
			System.out.println();
		}
		
		long timp1 = System.currentTimeMillis();
		
		Vector <ComputeElement> CEVector = new Vector <ComputeElement> ();
		for (int i = 0; i < m; i++)
			for (int j = 0; j < p; j++) {
				int rv[] = new int[100];
				int cv[] = new int[100];
				for (int k = 0; k < n; k++) {
					rv[k] = a[i][k];
					cv[k] = b[k][j];
				}

				CEVector.add(new ComputeElement(i, j, rv, cv));

			}
		for (int i = 0; i < CEVector.size(); i++)
			CEVector.get(i).join();
		System.out.println("Rezultatul inmultirii celor doua matrici:");
		for (int i = 0; i < m; i++) {
			for (int j = 0; j < p; j++)
				System.out.print(c[i][j] + " ");
			System.out.println();
		}
		
		long timp2 = System.currentTimeMillis();
		System.out.println("Timpul de executie in milisecunde este :");
		System.out.print(timp2-timp1);
	}
} 
